name: Auto Tag

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - '.github/**'
      - 'LICENSE'

permissions:
  contents: write

jobs:
  auto-tag:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for tag detection

      - name: Get latest tag
        id: get_tag
        run: |
          # Get the latest tag, or use v0.0.0 if no tags exist
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Latest tag: $LATEST_TAG"

      - name: Determine version bump
        id: bump
        run: |
          LATEST_TAG="${{ steps.get_tag.outputs.latest_tag }}"
          
          # Remove 'v' prefix for version calculation
          VERSION=${LATEST_TAG#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          
          # Get commits since last tag
          if [ "$LATEST_TAG" = "v0.0.0" ]; then
            COMMITS=$(git log --pretty=format:"%s" main)
          else
            COMMITS=$(git log ${LATEST_TAG}..HEAD --pretty=format:"%s")
          fi
          
          echo "Commits since last tag:"
          echo "$COMMITS"
          
          # Check for breaking changes (MAJOR bump)
          if echo "$COMMITS" | grep -qE "^[a-z]+(\(.+\))?!:|^BREAKING CHANGE:"; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            BUMP_TYPE="major"
          # Check for features (MINOR bump)
          elif echo "$COMMITS" | grep -qE "^feat(\(.+\))?:"; then
            MINOR=$((MINOR + 1))
            PATCH=0
            BUMP_TYPE="minor"
          # Check for fixes or other changes (PATCH bump)
          elif echo "$COMMITS" | grep -qE "^(fix|perf|refactor|build|ci|chore)(\(.+\))?:"; then
            PATCH=$((PATCH + 1))
            BUMP_TYPE="patch"
          else
            echo "No conventional commits found, skipping version bump"
            echo "skip=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          echo "skip=false" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION (${BUMP_TYPE} bump)"

      - name: Create and push tag
        if: steps.bump.outputs.skip != 'true'
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          BUMP_TYPE="${{ steps.bump.outputs.bump_type }}"
          
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Create annotated tag with message
          git tag -a "$NEW_VERSION" -m "Release $NEW_VERSION - ${BUMP_TYPE} version bump"
          
          # Push the tag
          git push origin "$NEW_VERSION"
          
          echo "✅ Created and pushed tag: $NEW_VERSION"

      - name: Summary
        if: steps.bump.outputs.skip != 'true'
        run: |
          echo "## 🚀 New Release Created" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Previous Version**: ${{ steps.get_tag.outputs.latest_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **New Version**: ${{ steps.bump.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Bump Type**: ${{ steps.bump.outputs.bump_type }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The release workflow will now automatically build and publish binaries." >> $GITHUB_STEP_SUMMARY

      - name: No version bump
        if: steps.bump.outputs.skip == 'true'
        run: |
          echo "## ℹ️ No Version Bump" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "No conventional commits found since last tag." >> $GITHUB_STEP_SUMMARY
          echo "Use conventional commit messages to trigger automatic versioning:" >> $GITHUB_STEP_SUMMARY
          echo "- \`feat:\` for new features (minor bump)" >> $GITHUB_STEP_SUMMARY
          echo "- \`fix:\` for bug fixes (patch bump)" >> $GITHUB_STEP_SUMMARY
          echo "- \`feat!:\` or \`BREAKING CHANGE:\` for breaking changes (major bump)" >> $GITHUB_STEP_SUMMARY
